/****************************************************************************
 Copyright (c) 2012 ArtPig Software LLC
 
 http://www.artpigsoft.com
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/

#ifndef ArtPigIOS_APSGraphic_h
#define ArtPigIOS_APSGraphic_h

#include "APSResource.h"


APS_BEGIN_NAMESPACE(artpig)

class APSGraphicAction;
class APSAction;
class APSResourceProvider;
class APSLinkerAction;
class APSGraphicGroup;

extern const unsigned int kAPSGraphic_defaultTouchOption;

/**
 @brief	APSGraphic has graphic information and creates cocos2d::CCNode object.
 
 */
class  APSGraphic : public APSResource
{
    
    APS_CLASS_NAME(APSGraphic)
    
    /** An index of parent graphic group that contains this graphic.    */
    APS_SYNTHESIZE_WITH_KEY(APSIndex, m_parentIndex, ParentIndex)    
    APS_SYNTHESIZE_WITH_KEY(float, m_level, Level)
        
    APS_SYNTHESIZE_WITH_KEY(cocos2d::CCPoint, m_position, Position)
    APS_SYNTHESIZE_WITH_KEY(cocos2d::CCSize, m_size, Size)
    APS_SYNTHESIZE_WITH_KEY(cocos2d::CCPoint, m_anchor, Anchor)
    APS_SYNTHESIZE_WITH_KEY(cocos2d::CCPoint, m_scale, Scale)
    APS_SYNTHESIZE_WITH_KEY(cocos2d::CCPoint, m_skew, Skew)
    APS_SYNTHESIZE_WITH_KEY(float, m_rotation, Rotation)
    APS_SYNTHESIZE_WITH_KEY(unsigned int, m_opacity, Opacity)
    APS_SYNTHESIZE_WITH_KEY(bool, m_visible, Visible)
    APS_SYNTHESIZE_WITH_KEY(unsigned int, m_touchOption, TouchOption)
    
    /** runningOpacity is changed by APSCCFadeChildrenTo during fade action is
     performed. After runningOpacity property is changed, updateAccOpacity()
     should be called to eventually set accOpacity property.
     */
    APS_SYNTHESIZE(unsigned int, m_runningOpacity, RunningOpacity)
    APS_SYNTHESIZE(unsigned int, m_accOpacity, AccOpacity)
    
    APS_SYNTHESIZE_READONLY(bool, m_isShown, IsShown)
    
    APS_PROPERTY_KEY(TouchBeginEventLinkers)
    APS_PROPERTY_KEY(TouchMovedEventLinkers)
    APS_PROPERTY_KEY(TouchEndEventLinkers)
    APS_PROPERTY_KEY(TouchCancelledEventLinkers)
    
    APS_SYNTHESIZE_WITH_KEY(bool, m_isTouchEnabled, IsTouchEnabled)
    APS_SYNTHESIZE(bool, m_runningIsTouchEnabled, RunningIsTouchEnabled)
    
public:
    /** Constructor of APSGraphic. If 'properties' parameter is not NULL, the 
     instance is initialized by the properties.
     */
    APSGraphic(APSDictionary *properties=NULL);
	virtual ~APSGraphic();
    
    /** Initializes this APSGraphic object with given properties.         */
    virtual bool initWithProperties(APSDictionary *properties);
        
    /** Resets properties of cocos2d::CCNode object to initial state. resetNode() is just
     an alias of initNode().
     */
    bool resetNode() { return this->initNode(); }
    
    /** Initializes cocos2d::CCNode objects in APSGraphic. initNode() can be called 
     multiple times to reset cocos2d::CCNode objects' states back to original.
     */
    virtual bool initNode();

    /** Returns cocos2d::CCNode generated by this APSGraphic. 
     */
    virtual cocos2d::CCNode *getNode();
    
    /** Returns parent graphic group that contains this graphic.
     This must be called after setting parentIndex property.
     */
    virtual APSGraphic *getParent();
        
    /** Updates accOpacity, accOpacity value propagates to the all descendant
     graphics. Opacities are multiplied from parent to children thoughout 
     graphics hierarchy. For performance reason, updateAccOpacity() should
     be called as minimum times as possible.
     */
    virtual void updateAccOpacity();

    /** Returns origin(left, bottom) position relative to parent coordinations
     */
    cocos2d::CCPoint getOriginPosition() const;
        
    virtual cocos2d::CCAffineTransform getNodeToSymbolTransform();
    virtual cocos2d::CCAffineTransform getSymbolToNodeTransform();
    
    APSResourceArray *getLinkersForEvent(APSEventType type) const;
    APSResourceArray *getLinkersForEventWithCreation(APSEventType type);
    
    /** Compres this graphic with a given graphic. Returns true if this graphic
     is displayed above the compared graphic. 
     */
    bool isAbove(APSGraphic *graphic) { return m_level < graphic->getLevel(); }
    
    bool isNodeVisible();
    void show();
    void hide();
    
    cocos2d::CCPoint convertPositionFromParentNode(const cocos2d::CCPoint &position);
    
    cocos2d::CCPoint getPositionInPixels();
    cocos2d::CCSize getSizeInPixels();
    
    /** If retainsTouch is true, graphic receives all following touch events(touch moved, touch ended, and touch cancelled) once touch begin event is on this graphic.
     */
    bool getRetainsTouch() const;
    void setRetainsTouch(bool retainsTouch);
    
    /** If acceptsTouchMoveEnter is true, this graphic receives 'touch moved', 'touch ended', and 'touch cancelled' events that have begun in external position.
     */
    bool getAcceptsTouchMoveEnter() const;
    void setAcceptsTouchMoveEnter(bool acceptsMoveEnter);
    
    /** If acceptsTouchOnlyVisible is true, graphic receives touch events only when it is visible in the screen.
     */
    bool getAcceptsTouchOnlyVisible() const;
    void setAcceptsTouchOnlyVisible(bool acceptsTouchOnlyVisible);
protected:
    virtual cocos2d::CCNode *createNode();

    cocos2d::CCNode * m_node;

    APSGraphic *m_parent;
    
    std::vector<APSResourceArray *> *m_touchEventLinkers;

    friend class APSGraphicGroup;
};

APS_END_NAMESPACE

#endif
